{"mappings":"AAAA,aAGA,MAAMA,kBAAoBC,SAASC,cAAc,aAC3CC,sBAAwBF,SAASC,cAAc,YAC/CE,KAAOH,SAASC,cAAc,SAC9BG,UAAYJ,SAASC,cAAc,sBACnCI,cAAgBL,SAASC,cAAc,0BACvCK,cAAgBN,SAASC,cAAc,0BACvCM,YAAcP,SAASC,cAAc,cAErCO,QAAUR,SAASC,cAAc,mBAEjCQ,WAAaT,SAASC,cAAc,eAM1C,MAAMS,QACFC,KAAO,IAAIC,KACXC,IAAMD,KAAKE,MAAQ,KAAKC,OAAM,GAAIC,KAAK,KAEvCC,YAAYC,EAAQC,EAAUC,GAC1BC,KAAKH,OAASA,EACdG,KAAKF,SAAWA,EAChBE,KAAKD,SAAWA,C,CAGpBE,kBAIID,KAAKE,YAAc,GAAGF,KAAKG,YAAY,GAAGC,gBAAgBJ,KAAKG,YAAYT,MAAM,SAFlE,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAE7BM,KAAKV,KAAKe,eAAeL,KAAKV,KAAKgB,W,EAK5I,MAAMC,gBAAgBlB,QAClBc,YAAc,UAEdP,YAAYC,EAAQC,EAAUC,GAC1BS,MAAMX,EAAQC,EAAUC,GACxBC,KAAKS,kBACLT,KAAKC,iB,CAGTQ,kBAEI,OADAT,KAAKU,KAAoD,IAA7CC,KAAKC,MAAMZ,KAAKF,UAAUE,KAAKD,SAAS,KAAS,IACtDC,KAAKU,I,EAKpB,MAAMG,gBAAgBxB,QAClBc,YAAc,UACdP,YAAYC,EAAQC,EAAUC,GAC1BS,MAAMX,EAAQC,EAAUC,GACxBC,KAAKc,mBACLd,KAAKC,iB,CAGTa,mBAEI,OADAd,KAAKe,MAAqD,IAA7CJ,KAAKC,MAAMZ,KAAKF,UAAUE,KAAKD,SAAS,KAAS,IACvDC,KAAKe,K,EAKpB,MAAMC,gBAAgB3B,QAClBc,YAAc,UACdP,YAAYC,EAAQC,EAAUC,GAC1BS,MAAMX,EAAQC,EAAUC,GACxBC,KAAKiB,kBACLjB,KAAKC,iB,CAGTgB,kBAEI,OADAjB,KAAKkB,YAA2D,IAA7CP,KAAKC,MAAMZ,KAAKF,UAAUE,KAAKD,SAAS,KAAS,IAC7DC,KAAKkB,W,EAKpB,MAAMC,iBAAiB9B,QACnBc,YAAc,WACdP,YAAYC,EAAQC,EAAUC,GAC1BS,MAAMX,EAAQC,EAAUC,GACxBC,KAAKoB,mBACLpB,KAAKC,iB,CAGTmB,mBAEI,OADApB,KAAKqB,aAAeV,KAAKC,MAAMZ,KAAMF,SAAS,OAAQE,KAAKD,SAAS,IAAI,KAAK,IACtEC,KAAKqB,Y,EAMpB,MAAMC,IAAM,IAAIf,QACVgB,MAAQ,IAAIV,QACZW,KAAO,IAAIR,QACXS,KAAO,IAAIN,SAMjB,MAAMO,IACFC,GACAC,GACAC,GAAY,GACZxC,GACAyC,GAAgB,GAEhBlC,cAEII,KAAK+B,mBAGL7C,YAAY8C,iBAAiB,QAAShC,KAAKiC,YAAYC,KAAKlC,OAC5DtB,kBAAkBsD,iBAAiB,QAAShC,KAAKmC,aAAaD,KAAKlC,M,CAKvEoC,eAEOC,UAAUC,YACTD,UAAUC,YAAYC,mBAAmBvC,KAAKwC,SAASN,KAAKlC,OAAO,WAC/DyC,MAAM,oC,IASVA,MAAM,mD,CAMdD,SAASE,GACL,MAAMC,SAACA,GAAYD,EAAS7C,QACtB+C,UAACA,GAAaF,EAAS7C,OAEvBA,EAAS,CAAC8C,EAAUC,GAI1B5C,MAAK2B,EAAOkB,EAAElB,IAAI,OAAOmB,QAAQjD,EAAQ,IACzCgD,EAAEE,UAAU,iDAAkD,CAC1DC,YAAa,4FACdC,MAAMjD,MAAK2B,GAEdkB,EAAEK,OAAOrD,GAAQoD,MAAMjD,MAAK2B,GAAMwB,UAAU,yBAAyBC,YAErEpD,MAAK2B,EAAK0B,GAAG,QAASrD,KAAKsD,iBAAiBpB,KAAKlC,OAAO,WACpDyC,MAAM,8B,IAKdc,qBAAqBlE,GAEjB,MAAMmE,IAACA,EAAGC,IAAEA,GAAOzD,MAAK4B,EAAU8B,OAClCb,EAAEK,OAAO,CAACM,EAAKC,IAAMR,MAAMjD,MAAK2B,GAAMwB,UAAUN,EAAEc,MAAM,CACpDC,SAAU,IACVC,SAAU,GACVC,WAAW,EACXC,cAAc,EACdC,UAAW,GAAG3E,EAAQc,uBAClB8D,gBAAgB,qBAG3BjE,KAAAkE,sBAAA7E,QAAAa,6BAEDkD,WACA,C,iBAEiBe,GACbnE,MAAA4B,EAAeuC,EAEfnF,cAAAoF,QACA,MAAEZ,IAAMA,EAACC,OAAAzD,MAAA4B,EAAA8B,O,SAAS,CAAGF,EACxBC,IAEDR,MAAAjD,MAAA2B,GAAAyB,WAEA,C,YAGIiB,GACAA,EAAAC,iBAEA,MAAMnE,EAAWpB,UAAawF,MACxBzE,EAASd,cAAUuF,MACrBxE,EAAQd,cAAAsF,OAEZf,MAAAC,OAAAzD,MAAA4B,EAA6B8B,OAC7B,IAAArE,EAwB8B,Y,MAAK,IAAAkB,QAAA,CAAGiD,EAC9BC,GACP3D,EAAAC,GAEEC,MAAA6B,EAAW2C,KAAKnF,IACW,Y,MAAK,IAAAwB,QAAA,CAAG2C,EAC9BC,GACP3D,EAAAC,GAEEC,MAAA6B,EAAW2C,KAAKnF,IACW,Y,MAAK,IAAA2B,QAAA,CAAGwC,EAC9BC,GACP3D,EAAAC,GAEEC,MAAA6B,EAAW2C,KAAKnF,IACY,a,MAAK,IAAA8B,SAAA,CAAGqC,EAC/BC,GACP3D,EAAAC,GACGC,MAAC6B,EAAA2C,KAAAnF,IAILW,KAAKuD,qBAAmBlE,GAExBW,KAAAyE,eAAmBpF,G,KACfqF,mBAMRC,Y,WAHI3F,cAAWuF,MAAYtF,cAAMsF,MAAA,EAChC,GAEqB,I,uBAIPlF,GAGX,MAA2B,YAAxBA,EAAQc,YACA,QAEgB,YAAxBd,EAAQc,YACP,QAEP,YAAAd,EAAAc,YAAA,KAED,aAAAd,EAAAc,YAAA,WAEA,C,eAiBId,GAEA,IAAAuF,EAAA,6CAC2BvF,EACvBc,yBAASd,EAAAG,oDAUCH,EAAAa,qHAYAF,KAAAkE,sBAAA7E,+DAENA,EAAKS,mQAwBhBT,EAAAU,gHAgB2B,YAApBV,EAAMc,cAA4ByE,GAAQ,iLAC/BvF,EAAAqB,kJAMM,YAArBrB,EAAYc,cAA0ByE,GAAS,iLAItBvF,EAAA0B,kJAWE,YAAvB1B,EAAEc,cAAyByE,GAAA,iLAGlCvF,EAAA6B,wJAQiB,aAAV7B,EAAOc,cAAGyE,GAAA,iL","sources":["asset/js/Mapty__JS.js"],"sourcesContent":["'use strict';\r\n\r\n// Variables for DOM \r\nconst containerWorkouts = document.querySelector('.workouts');\r\nconst workoutContainer__NEW = document.querySelector('.workout');\r\nconst form = document.querySelector('.form');\r\nconst inputType = document.querySelector('.form__input--type');\r\nconst inputDistance = document.querySelector('.form__input--distance');\r\nconst inputDuration = document.querySelector('.form__input--duration');\r\nconst inputButton = document.querySelector('.form__btn');\r\n\r\nconst message = document.querySelector('.form__messages');\r\n\r\nconst Close__btn = document.querySelector('.Close__btn');\r\n\r\n\r\n// Making Class for APP --------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n// Class Workout\r\nclass workout {\r\n    date = new Date();\r\n    id = (Date.now() + \" \").slice(-5).trim(\" \");\r\n\r\n    constructor(coords, distance, duration){\r\n        this.coords = coords;       //[lat, lng]\r\n        this.distance = distance;       //In KM\r\n        this.duration = duration;       //In MIN \r\n    }\r\n\r\n    _setDescription() {\r\n        // Months log\r\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n\r\n        this.description = `${this.workoutType[0].toUpperCase()}${this.workoutType.slice(1)} on ${months[this.date.getMonth()]} ${this.date.getDate()}`;\r\n    }\r\n}\r\n\r\n// Class Running\r\nclass running extends workout {\r\n    workoutType = 'running';\r\n\r\n    constructor(coords, distance, duration){\r\n        super(coords, distance, duration);\r\n        this.calcRunningPace();\r\n        this._setDescription();\r\n    }\r\n\r\n    calcRunningPace() {\r\n        this.pace = Math.round(this.distance/(this.duration/60))*100/100;\r\n        return this.pace;\r\n    }\r\n}\r\n\r\n// Class Cycling\r\nclass cycling extends workout{\r\n    workoutType = 'cycling';\r\n    constructor(coords, distance, duration){\r\n        super(coords, distance, duration);\r\n        this.calcCyclingSpeed();\r\n        this._setDescription();\r\n    }\r\n\r\n    calcCyclingSpeed() {\r\n        this.speed = Math.round(this.distance/(this.duration/60))*100/100;\r\n        return this.speed;\r\n    }\r\n}\r\n\r\n//Class Walking\r\nclass walking extends workout{\r\n    workoutType = 'walking';\r\n    constructor(coords, distance, duration){\r\n        super(coords, distance, duration);\r\n        this.calcWalkingPace(); \r\n        this._setDescription();\r\n    }\r\n\r\n    calcWalkingPace() {\r\n        this.walkingPace = Math.round(this.distance/(this.duration/60))*100/100;\r\n        return this.walkingPace;\r\n    }\r\n} \r\n\r\n// Class Swimming\r\nclass swimming extends workout{\r\n    workoutType = 'swimming';\r\n    constructor(coords, distance, duration){\r\n        super(coords, distance, duration);\r\n        this.calcSwimmingPace();\r\n        this._setDescription();\r\n    }\r\n\r\n    calcSwimmingPace() {\r\n        this.swimmingPace = Math.round((this.distance/1.609)/(this.duration/60)*100)/100;\r\n        return this.swimmingPace;\r\n    }\r\n}\r\n\r\n// Making classes objects:\r\n\r\nconst run = new running();\r\nconst cycle = new cycling();\r\nconst walk = new walking();\r\nconst swim = new swimming();\r\n\r\n// //////////////////////////////////////////////////////////////////////////////////////MAKING CLASS APP///////////////////////////////////////////////////////////////////////////////////////\r\n\r\n// Using (_) => underscore for protected/private classes\r\n// Class App\r\nclass App{\r\n    #map;\r\n    #mapEvent;\r\n    #workouts = [];\r\n    #workout;\r\n    #mapZoomLevel = 15;\r\n\r\n    constructor() {\r\n        // Get local storage data\r\n        this._getLocalStorage();\r\n\r\n        // Event Handlers\r\n        inputButton.addEventListener('click', this._newWorkout.bind(this));        \r\n        containerWorkouts.addEventListener('click', this._moveToPopUp.bind(this));\r\n    }\r\n\r\n    // Getting User position\r\n\r\n    _getPosition() {\r\n        // Accessing Geolocation\r\n        if(navigator.geolocation){\r\n            navigator.geolocation.getCurrentPosition(this._loadMap.bind(this), function () {\r\n                alert(\"Allow Mapty to know your location\");}),\r\n                {\r\n                    maximumAge:15000, \r\n                    timeout: 10000, \r\n                    enableHighAccuracy: true,\r\n                    maxZoom: Infinity,\r\n                }\r\n        }\r\n        else {\r\n            alert(\"Geolocation API is not supported in your browser\");\r\n        }\r\n    }\r\n\r\n    // Loading Maps\r\n\r\n    _loadMap(position) {\r\n        const {latitude} = position.coords;\r\n        const {longitude} = position.coords;\r\n\r\n        const coords = [latitude, longitude];\r\n\r\n        // Adding Leaflet Maps with popup action here\r\n\r\n        this.#map = L.map('map').setView(coords, 13);\r\n        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n            attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        }).addTo(this.#map);\r\n\r\n        L.marker(coords).addTo(this.#map).bindPopup('Your Current Location').openPopup();\r\n\r\n        this.#map.on('click', this._onClickMapEvent.bind(this), function (){\r\n            alert(\"Could not get your position\");\r\n        } );\r\n    }\r\n\r\n    // Method for map marker\r\n    _renderWorkoutMarker(workout) {\r\n        // Making Marker\r\n        const {lat, lng} = this.#mapEvent.latlng;\r\n        L.marker([lat, lng]).addTo(this.#map).bindPopup(L.popup({\r\n            maxWidth: 250,\r\n            minWidth: 50,\r\n            autoClose: true,\r\n            closeOnClick: true,\r\n            className: `${workout.workoutType}-popup`, \r\n            })).setPopupContent(`\r\n                ${this._workoutTypeDecisions(workout)} ${workout.description}\r\n            `).openPopup();\r\n    }\r\n\r\n    // Marking Maps location\r\n    _onClickMapEvent(mapEvent__new) {\r\n        this.#mapEvent = mapEvent__new;\r\n        inputDistance.focus();\r\n        const {lat, lng} =  this.#mapEvent.latlng;\r\n\r\n        // Making Marker to locate latitude and longitude\r\n        L.marker([lat, lng]).addTo(this.#map).openPopup();\r\n    }\r\n\r\n    // Adding Workouts in Workout Section\r\n\r\n    _newWorkout(e) {\r\n        e.preventDefault();\r\n\r\n        // Getting data from user\r\n        const workoutType = inputType.value;\r\n        const distance = inputDistance.value;\r\n        const duration = inputDuration.value;\r\n        const {lat, lng} = this.#mapEvent.latlng;\r\n        let workout;\r\n\r\n        // function setMessageOFF (){\r\n        //     message.innerHTML = \" \";\r\n        // }\r\n\r\n        // Validating Inputs\r\n        // if(distance === Number || duration === Number) {\r\n        //     message.innerHTML = \"\";\r\n        // } \r\n\r\n        // if(distance > 0 || duration > 0){\r\n        //     message.textContent = \"\";\r\n        // }\r\n\r\n        // if(distance !== Number || duration !== Number){\r\n        //     message.innerHTML = \"Please enter a valid positive number input\";\r\n        //     setTimeout(setMessageOFF, 4000);\r\n        //     inputButton.removeEventListener('click', this._newWorkout.bind(this));\r\n        // }\r\n\r\n        // if(distance < 0 || duration < 0){\r\n        //     message.innerHTML = \"Please enter a valid positive number input\";\r\n        //     setTimeout(setMessageOFF, 4000);\r\n        // }\r\n\r\n        if(workoutType === \"running\"){\r\n            workout = new running([lat, lng], distance, duration);\r\n            this.#workouts.push(workout);\r\n        }\r\n       \r\n        if(workoutType === \"cycling\"){\r\n            workout = new cycling([lat, lng], distance, duration);\r\n            this.#workouts.push(workout);\r\n        }\r\n\r\n        if(workoutType === \"walking\"){\r\n            workout = new walking([lat, lng], distance, duration);\r\n            this.#workouts.push(workout);\r\n        }\r\n\r\n        if(workoutType === \"swimming\"){\r\n            workout = new swimming([lat, lng], distance, duration);\r\n            this.#workouts.push(workout);\r\n        }\r\n        this._renderWorkoutMarker(workout);\r\n        \r\n        this._renderWorkout(workout);\r\n\r\n        this._setLocalStorage();\r\n            \r\n        function clearInput(){\r\n            inputDistance.value = inputDuration.value = \"\";\r\n        }\r\n\r\n        setTimeout(clearInput, 1000);\r\n    }\r\n\r\n    _workoutTypeDecisions(workout){\r\n        if(workout.workoutType === 'running'){\r\n            return '🏃‍♂️' ;\r\n        }\r\n        if(workout.workoutType === 'cycling'){\r\n            return '🚴‍♀️' ;\r\n        }\r\n        if(workout.workoutType === 'walking'){\r\n            return '🚶' ;\r\n        }\r\n        if(workout.workoutType === 'swimming'){\r\n            return '🏊' ;\r\n        }\r\n    }\r\n\r\n    // ${workout.workoutType === 'running' ? '🏃‍♂️' : ' ' || workout.workoutType === 'cycling' ? '🚴‍♀️' : ' ' || workout.workoutType === 'walking' ? '🚶' : ' '  || workout.workoutType === 'swimming' ? '🏊' : ' '} ${workout.description}\r\n\r\n    // Adds workout description to the workouts section\r\n    _renderWorkout(workout) {\r\n        let html = `\r\n            <li class=\"workout workout--${workout.workoutType}\" data-id=\"${workout.id}\">\r\n                <h2 class=\"workout__title\">${workout.description}</h2>\r\n                <div class=\"workout__details\">\r\n                    <span class=\"workout__icon\">${this._workoutTypeDecisions(workout)}</span>\r\n                    <span class=\"workout__value\">${workout.distance}</span> \r\n                    <span class=\"workout__unit\">km</span>\r\n                </div>\r\n                <div class=\"workout__details\">\r\n                    <span class=\"workout__icon\">⏱</span>\r\n                    <span class=\"workout__value\">${workout.duration}</span>\r\n                    <span class=\"workout__unit\">min</span>\r\n                </div>\r\n        `;\r\n\r\n        // Adding workout descriptions\r\n\r\n        // For running\r\n        if(workout.workoutType === 'running'){\r\n            html += `\r\n                        <div class=\"workout__details\">\r\n                        <span class=\"workout__icon\">⚡️</span>\r\n                        <span class=\"workout__value\">${workout.pace}</span>\r\n                        <span class=\"workout__unit\">km/h</span>\r\n                    </div>\r\n                </li> \r\n            `;\r\n        }\r\n\r\n        // For cycling\r\n        if(workout.workoutType === 'cycling'){\r\n            html += `\r\n                        <div class=\"workout__details\">\r\n                        <span class=\"workout__icon\">⚡️</span>\r\n                        <span class=\"workout__value\">${workout.speed}</span>\r\n                        <span class=\"workout__unit\">km/h</span>\r\n                    </div>\r\n                </li>\r\n            `;\r\n        }\r\n\r\n        // For walking\r\n        if(workout.workoutType === 'walking'){\r\n            html += `\r\n                        <div class=\"workout__details\">\r\n                        <span class=\"workout__icon\">⚡️</span>\r\n                        <span class=\"workout__value\">${workout.walkingPace}</span>\r\n                        <span class=\"workout__unit\">km/h</span>\r\n                    </div>\r\n                </li>\r\n            `;\r\n        }\r\n\r\n        // For swimming\r\n        if(workout.workoutType === 'swimming'){\r\n            html += `\r\n                        <div class=\"workout__details\">\r\n                        <span class=\"workout__icon\">⚡️</span>\r\n                        <span class=\"workout__value\">${workout.swimmingPace}</span>\r\n                        <span class=\"workout__unit\">m/h</span>\r\n                    </div>\r\n                </li>\r\n            `;\r\n        }\r\n\r\n        // Adding workout descriptions as an sibling element of the form component/node\r\n        form.insertAdjacentHTML('afterend', html);\r\n    }\r\n\r\n    _moveToPopUp(e) {\r\n\r\n        if (!this.#map) {return};\r\n\r\n        const workoutElement = e.target.closest('.workout');\r\n\r\n        if(!workoutElement) {\r\n            return;\r\n        }\r\n\r\n        this.#workout = this.#workouts.find(\r\n            ele => ele.id === workoutElement.dataset.id\r\n        );\r\n\r\n        this.#map.setView(this.#workout.coords, this.#mapZoomLevel, {animate: true, pan: {\r\n            duration: 1,\r\n        }});\r\n    }\r\n\r\n    // Using Local Storage to save workouts log\r\n    _setLocalStorage(){\r\n        localStorage.setItem('workouts', JSON.stringify(this.#workouts));\r\n        console.log(JSON.stringify(this.#workouts));\r\n    }\r\n\r\n    // Getting local storage data\r\n    _getLocalStorage(){\r\n        const workoutData = JSON.parse(localStorage.getItem('workouts'));\r\n\r\n        if(!workoutData){\r\n            return;\r\n        }\r\n\r\n        // Setting data to workouts class for local storage\r\n        this.#workouts = workoutData;\r\n\r\n        this.#workouts.forEach(work => {\r\n            this._renderWorkout(work);\r\n        });\r\n    }\r\n\r\n    reset(){\r\n        localStorage.removeItem('workouts');\r\n        location.reload();\r\n    }\r\n}\r\n\r\nconst app = new App();\r\napp._getPosition();"],"names":["containerWorkouts","document","querySelector","workoutContainer__NEW","form","inputType","inputDistance","inputDuration","inputButton","message","Close__btn","workout","date","Date","id","now","slice","trim","constructor","coords","distance","duration","this","_setDescription","description","workoutType","toUpperCase","getMonth","getDate","running","super","calcRunningPace","pace","Math","round","cycling","calcCyclingSpeed","speed","walking","calcWalkingPace","walkingPace","swimming","calcSwimmingPace","swimmingPace","run","cycle","walk","swim","App","map","mapEvent","workouts","mapZoomLevel","_getLocalStorage","addEventListener","_newWorkout","bind","_moveToPopUp","_getPosition","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","L","setView","tileLayer","attribution","addTo","marker","bindPopup","openPopup","on","_onClickMapEvent","_renderWorkoutMarker","lat","lng","latlng","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","_workoutTypeDecisions","mapEvent__new","focus","e","preventDefault","value","push","_renderWorkout","_setLocalStorage","setTimeout","html"],"version":3,"file":"Mapty__HTML.9a584b87.js.map"}